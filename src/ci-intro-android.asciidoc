=  Introduction to Continuous Integration Server Usage Focusing on Android Development 
:author:    Manfred Moser, simpligility technologies inc.
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:toc!:
:slidetitleindentcar: 
:imagesdir: images
:copyright: 2013, simpligility technologies inc., CreativeCommons Attribution-ShareAlike 3.0 Unported(http://creativecommons.org/licenses/by-sa/3.0/)

== About Manfred Moser

* Long time CI user and administrator

* Author of http://wiki.eclipse.org/The_Hudson_Book[The Hudson Book]

* Open source project lead https://code.google.com/p/ksoap2-android/[ksoap2-android], https://code.google.com/p/maven-android-plugin/[Android Maven Plugin]

* Presenter at various conferences AnDevCon, OSCON, JUC, ... 

* Founder of http://www.mosabuam.com/vijug/blog/[VIJUG] and https://plus.google.com/112826376355061333205/posts[GDG Victoria BC]

* Owner http://www.simpligility.com[simpligility technologies inc.]

== Slides and Source

Source and slides::

https://github.com/simpligility/introduction-to-continuous-integration-for-android-developers

Slides only::

http://www.simpligility.com/document/ci-intro-android.html

== Objectives

* Understand the benefits of using a continuous integration

* Consider the options for deployment

* Glance at different available CI servers and services

* Get started

* Android specific considerations

TIP: Please interrupt me and ask questions - this should be an open conversation!

== What is a CI server? 

[quote, Anonymous System Administrator]
A CI server is nothing special - it is just CRON with a user interface.

== What is a CI server? 

[quote, Anonymous Developer]
A relentless worker - another member of my team, that works for ME!

== What is a CI server? 

[quote, Anonymous System Administrator] 
Just a server running your builds.

== What is a CI server? 

[quote, Anonymous QA developer]
A great tool saving me from having to run all the tests manually.

== What is a CI server? 

[quote, Anonymous QA Manager]
A communication tool for the development and QA teams and beyond.

== What is a CI server? - really now!

[quote, Manfred Moser] 
Everything mentioned so far and more! A CI
server/cluster is a central piece of your development
infrastructure. Once you got used to having a CI server, you will never look back.


== What is Continuous Integration?

A *software development* practice

that evolved in the 
http://www.extremeprogramming.org/[Extreme Programming (XP)] 
community 

starting *about 1999*

and first mentioned by Martin Fowler and Kent Beck.


== What is Continuous Integration? 

[quote, Martin Fowler]
Continuous Integration is a software development practice where
members of a team integrate their work frequently, usually each person
integrates at least daily - leading to multiple integrations
per day. Each integration is verified by an automated build (including
test) to detect integration errors as quickly as possible. Many teams
find that this approach leads to significantly reduced integration
problems and allows a team to develop cohesive software more rapidly. 

Full article is on
http://www.martinfowler.com/articles/continuousIntegration.html[Martin
Fowlers web site]

== Practices of Continuous Integration - Part 1

According to Martin Fowler...

* Maintain a Single Source Repository

* Automate the Build

* Make Your Build Self-Testing

* Everyone Commits to the Mainline Every Day

* Every Commit Should Build the Mainline on an Integration Machine

== Practices of Continuous Integration - Part 1

* Keep the Build Fast

* Test in a Clone of the Production Environment

* Make it Easy for Anyone to Get the Latest Executable

* Everyone can see what's happening

* Automate Deployment

IMPORTANT: This should give you a good idea about what to AIM for! Let's discuss
this in detail...

== Continuous Delivery

Continuous integration taken to the next level::

* software is always in a state suitable for production deployment

* and is deployed to production regularly (e.g. daily or more often)

== Core Features of Continuous Integration Platforms

* Version control system integration

* Scheduling

* Build tool and script integration

* Communication features

* Ideally expandability

== Benefits

* Reduces the need for developers and others to manually build
  software

* Reduces the risk of integrating features, since it is done all the
  time (no more release deadline crunch!) 

* Automates and codifies how software is built

* Enhances visibility and communication in development, QA and beyond

* Reduces the number of defects and raises quality of your software

== Use Cases Beyond Software Builds


There are a *lot* of different use cases ->  expandability is key! 

* building and publishing a book or a website

* orchestrating home automation

* running backups

* analysis runs of e.g. log files

* batch runs on some server backend or database

== Deployment Options - Operating Systems? 

For Android development you have many options, but ..

* Are you also building iOS apps? 

* Is the production environment for e.g. the backend servers running on Linux? 

* Do you need to verify it works on Windows?

-> you might have to use different ones

== Deployment Options - One or Many?

- One large server

- Cluster of one server with multiple smaller slaves

-> In most enterprises one server will not be sufficient

== Deployment Options - Hardware or VM?

Hardware::

* more hazzle to look after and get started

* allows you to attache physical devices

* sort of required for some build (e.g. iOS)

Virtual Machines::

* easy to start and stop

* possible with different OS

* easier to scale


== Deployment Options - Provisioning?

How do I get all the tools needed to all the CI servers? 

* Tools built into CI servers (e.g. Maven download/install in Hudson)

* VM's and VM snapshots

* Provisioning systems like https://puppetlabs.com/[puppet] , 
  http://www.opscode.com/chef/[Chef] or http://cfengine.com/[CFEngine]

* Package management system of operating system directly (apt-get, yum...)

- Manual install on each machine .. painful after a while

[width="100%",frame="none",grid="none",halign="center",valign="center"]
|=======
| image:puppet.png[scale=100] | image:chef.png[scale=100] | image:cfengine.png[scale=100]
|=======

== Deployment Options - Scalability?

You can just throw more hardware at it...

Or do things dynamically: 

* using desktop computers as slaves at night when not used

* on demand start up of VM

* automatic provisioning of new VM

== Deployment Options

* computer under the desk in local network

* hardware in datacenter

* VM 

* VM in Cloud

* Mixture of it all


== Different CI Servers

Lots of them available

* open source

* commercial

* SAAS

* and combinations of the above

== Eclipse Hudson

[width="100%",frame="none",grid="none",halign="left",valign="center",cols="1,3"]
|=======
| image:hudson.png[scale=100] | http://www.hudson-ci.org
|=======

* Top level project of the Eclipse Foundation

* Backed by Oracle and used in their cloud offering

* Open source under the Eclipse Public License


== Jenkins


[width="100%",frame="none",grid="none",halign="left",valign="center",cols="1,3"]
|=======
| image:jenkins.png[scale=100] | http://www.jenkins-ci.org
|=======

* Open source and commercial version

* Backed by Cloudbees

* Open source, commercial and Saas

* Large, active community 

* Lots of plugins

== Travis CI

[width="100%",frame="none",grid="none",halign="left",valign="center",cols="1,3"]
|=======
| image:travis.png[scale="70"] | http://www.travis-ci.org
|=======

* Saas

* Great github integraton

* Free for open source projects 

* Pro version for private repositories

== Atlassian Bamboo

[width="100%",frame="none",grid="none",halign="left",valign="center",cols="1,3"]
|=======
| image:bamboo.png[scale=100] |  http://www.atlassian.com/software/bamboo
|=======

* great integration with other Atlassian products like JIRA

* good Amazon EC 2 support 

* self hosted or SAAS available

== JetBrains TeamCity

[width="100%",frame="none",grid="none",halign="left",valign="center",cols="1,3"]
|=======
| image:teamcity.png[scale=100] |  http://www.jetbrains.com/teamcity
|=======

* from the makers of IntelliJ IDEA/Android Studio 

* integration with YouTrack

* free for up to 20 builds 

== Others CI Servers - continued

* http://msdn.microsoft.com/en-us/vstudio/ff637362.aspx[MS Team
  Foundation Server]

** don't know much about it, strong .Net and MS tooling focus

* http://cruisecontrol.sourceforge.net/[Cruise Control]

** old and outdated, don't use it anymore

* http://www.thoughtworks-studios.com/go-continuous-delivery[ThoughWorks
  Go]

** focus towards continuous delivery

** community edition

* ...

NOTE: There are many more available, often as part of enterprise tools
under the Application Lifecycle Management ALM term

== How to Select Your CI Server Platform

* consider your needs beyond Android application builds

* try them out, most have open source or free trial or community
  editions

* consider what other tools like issue trackers you already use

NOTE: There are a lot of choices available. Just check out this
http://confluence.public.thoughtworks.org/display/CC/CI+Feature+Matrix[comparison
matrix]. But don't worry too much just get started.. 

== Building Applications 

For continuous integration, build needs to happen on the command line!

You can build Android applications in a couple of ways... 

* Apache Ant - but the Android Ant build is deprecated

* Apache Maven

* Gradle

* Any of the above invoked from script

* make for NDK apps, combined with above

* Custom script 

WARNING: Be careful not to rely too much on the configuration in a
specific CI server, that makes switching CI platform and running builds on other
machines more difficult. 

== Provisioning Android SDK

* via a script e.g. see https://github.com/jayway/maven-android-plugin-samples/blob/master/.travis.yml[Android Maven Plugin Samples] configuration

* using VM snapshots

* manually (wont scale but possible to get started)


== Provisioning Android SDK 

From travis file suitable for Linux

----
wget http://dl.google.com/android/android-sdk_r21.1-linux.tgz
tar xzf android-sdk_r21.1-linux.tgz
export ANDROID_HOME=$PWD/android-sdk-linux
export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
----

== Provisioning Android NDK 

From travis file suitable for Linux

----
NDK_ARCH=""
if [ `uname -m` = x86_64 ]; then NDK_ARCH=_64; fi
wget http://dl.google.com/android/ndk/android-ndk-r8e-linux-x86${NDK_ARCH}.tar.bz2
tar xjf android-ndk-r8e-linux-x86${NDK_ARCH}.tar.bz2
export ANDROID_NDK_HOME=$PWD/android-ndk-r8e
----


== Getting Android Platforms and Extras

From travis file suitable for Linux

----
android update sdk 
   --filter platform-tools,android-16,extra-android-support,sysimg-16
   --no-ui --force > /dev/null
----

Finding the right filter for different tools is painful. 

IMPORTANT: Google is planning on blocking this due to legal reasons


== Creating and starting emulator

With a script

----
echo no | android create avd --force -n test -t android-16 --abi x86
emulator -avd test -no-skin -no-audio -no-window &
----

You can also have them be a part of your VM image.

TIP: Or you can use the Jenkins Android Emulator Plugin...

== Testing Applications

On the JVM::

* Plain unit tests

* Tests with mocked Android classes


On Dalvik VM / Android::

* Integration/Instrumentation tests


SDK Tools::

* Instrumentation tests

* MonkeyRunner

* Monkey

* UI Automator

NOTE: There are dedicated in the cloud test setups available,
e.g. http://testdroid.com/[TestDroid from Bitbar]


== Android Testing Tools Beyond SDK

* http://www.robotium.org[Robotium]

* http://robolectric.org/[Robolectric]

* https://github.com/square/spoon[Spoon]

* https://github.com/DominikDary/selendroid[Selendroid]

* https://github.com/appium/appium[Appium]

* http://square.github.io/fest-android/[FEST Android]
* many more...



== Android Emulator 

One or multiple emulator or attached devices are needed for
instrumentation testing!

Devices::

* Need access to the hardware or host of VM

* Use a USB Hub

Emulator:: 

* Potentially easier to emulate lots of devices

* With hardware acceleration faster

TIP: Android Maven Plugin can run tests on all attached devices and
the Jenkins Android Emulator Plugin can create, start and stop them

== Android Instrumentation Testing

* Emulates a user and needs a emulator or device

* Is slower.. 

* Android Maven Plugin creates junit compatible test results per
  device!

== Analysis - Overview

There are *lots* of different tools available.

Java/Generic::

* Checkstyle

* PMD

* Findbugs

* Sonar

Android Specific::

* Lint


TIP:  Stephane Nicolas has a great sample project set up at
https://github.com/stephanenicolas/Quality-Tools-for-Android with lots
more tools


== Android Lint

Execute lint with

* command line execution 

* custom exec from build system like Gradle

* dedicated goal in Android Maven Plugin

* Android Lint Plugin for Jenkins

and then

* archive the reports per build

* create them in html format so users can investigate easily

== Android Continuous Deployment

Internally:: 

* to a repository manager like Sonatype Nexus 

* QA and other users can access apk via http url

To stores::

* All have a web UI -> you can automate the upload with scripts,
  e.g. parameterized selenium script

* Ideally stores would have a management API - I talked to the Play
  Store team at Google IO, they want to get there, we need to push them!

WARNING: I strongly recommend to adapt the frequency of deployments
suitable to your users!

== Other Jenkins Plugins

* HockeyApp Plugin for Jenkins - to publish app

* Zubhium Plugin for Jenkins

* GCM Notification Plugin

* Appaloosa Plugin

== More Links

* http://en.wikipedia.org/wiki/Continuous_integration[Wikipedia article about Continuous Integration]

* http://en.wikipedia.org/wiki/Continuous_delivery[Wikipedia article
  about Continuous Delivery]

== Demo Time

* Start-up scripts

* Jenkins and Hudson locally

* Travis

* Project setup, notifications and so on 

TIP: What else do you want to see?

== Summary

[quote,Manfred Moser] 
Continuous integration usage is easy and essential! Get on with it!

== The End

* Q & A

* Discussion

* Find me at http://www.simpligility.com
